#!/usr/bin/env python3
"""Build a WSL rootfs replicating the ChatGPT Codex environment.

Usage:
  build-codex-wsl.sh [--no-overlay]
  build-codex-wsl.sh (-h | --help)
  build-codex-wsl.sh --version

Options:
  --no-overlay    Do not overlay custom rootfs files [default: False]
  -h --help       Show this help message and exit.
  --version       Show version.
"""
import argparse
import shutil
import subprocess
import os

VERSION = "1.0"


def parse_args():
    parser = argparse.ArgumentParser(
        description="Build a WSL rootfs replicating the ChatGPT Codex environment.",
        add_help=False,
    )
    parser.add_argument("--no-overlay", action="store_true", help="Do not overlay custom rootfs files")
    parser.add_argument("--version", action="version", version=VERSION)
    parser.add_argument("-h", "--help", action="help", help="Show this help message and exit")
    return parser.parse_args()


def run(cmd, **kwargs):
    print("+", " ".join(cmd))
    subprocess.check_call(cmd, **kwargs)


def main():
    args = parse_args()
    overlay = not args.no_overlay

    REPO_URL = "https://github.com/openai/codex-universal.git"
    REPO_NAME = "codex-universal"
    REPO_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), REPO_NAME)
    IMAGE_NAME = "codex-universal-wsl"

    ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
    ARCHIVE_DIR = os.path.join(ROOT_DIR, "archive")
    BASE_ROOTFS_TAR = os.path.join(ARCHIVE_DIR, "%s.rootfs.tar" % REPO_NAME)
    BASE_REPO = os.path.join(ROOT_DIR, REPO_NAME)
    OVERLAY_DIR = os.path.join(ROOT_DIR, "rootfs")
    OUTPUT_DIR = os.path.join(ROOT_DIR, "build", "rootfs")
    ROOTFS_TAR = "%s.tar.xz" % IMAGE_NAME

    os.makedirs(ARCHIVE_DIR, exist_ok=True)
    if os.path.exists(OUTPUT_DIR):
        shutil.rmtree(OUTPUT_DIR)
    os.makedirs(OUTPUT_DIR)

    if not os.path.exists(REPO_DIR):
        run(["git", "submodule", "update", "--init", "--depth", "1"])

    run(["docker", "build", "-t", IMAGE_NAME, "."], cwd=REPO_DIR)

    cid = subprocess.check_output(["docker", "create", IMAGE_NAME, "/bin/bash"]).decode().strip()
    run(["docker", "export", cid, "-o", BASE_ROOTFS_TAR])
    run(["docker", "rm", cid])

    run(["tar", "-xf", BASE_ROOTFS_TAR, "-C", OUTPUT_DIR])
    os.makedirs(os.path.join(OUTPUT_DIR, "etc", "profile.d"), exist_ok=True)
    env_file = os.path.join(OUTPUT_DIR, "etc", "profile.d", "codex_env.sh")
    with open(env_file, "w") as f:
        f.write(
            """export LANG=${LANG:-C.UTF-8}
export LC_ALL=${LC_ALL:-C.UTF-8}
export CODEX_ENV_PYTHON_VERSION=${CODEX_ENV_PYTHON_VERSION:-3.12}
export CODEX_ENV_NODE_VERSION=${CODEX_ENV_NODE_VERSION:-20}
export CODEX_ENV_RUBY_VERSION=${CODEX_ENV_RUBY_VERSION:-3.4.4}
export CODEX_ENV_RUST_VERSION=${CODEX_ENV_RUST_VERSION:-1.87.0}
export CODEX_ENV_GO_VERSION=${CODEX_ENV_GO_VERSION:-1.24.3}
export CODEX_ENV_BUN_VERSION=${CODEX_ENV_BUN_VERSION:-1.2.14}
export CODEX_ENV_JAVA_VERSION=${CODEX_ENV_JAVA_VERSION:-21}
export CODEX_ENV_SWIFT_VERSION=${CODEX_ENV_SWIFT_VERSION:-6.1}

if [ -f /opt/codex/setup_universal.sh ]; then
    source /opt/codex/setup_universal.sh
fi
"""
        )

    if overlay:
        run(["cp", "-a", "%s/." % OVERLAY_DIR, OUTPUT_DIR])

    run(["tar", "-C", OUTPUT_DIR, "-cfJ", ROOTFS_TAR, "."])
    print("Created %s" % os.path.join(ROOT_DIR, ROOTFS_TAR))


if __name__ == "__main__":
    main()
