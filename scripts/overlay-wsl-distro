#!/usr/bin/env python3
"""Create a WSL-compatible Codex distro tarball.

Usage:
  overlay-wsl-distro.sh [--no-overlay]
  overlay-wsl-distro.sh (-h | --help)
  overlay-wsl-distro.sh --version

Options:
  --no-overlay    Do not overlay custom rootfs files [default: False]
  -h --help       Show this help message and exit.
  --version       Show version.
"""
import argparse
import shutil
import subprocess
import os

VERSION = "1.0"


def parse_args():
    parser = argparse.ArgumentParser(
        description="Create a WSL-compatible Codex distro tarball.",
        add_help=False,
    )
    parser.add_argument("--no-overlay", action="store_true", help="Do not overlay custom rootfs files")
    parser.add_argument("--version", action="version", version=VERSION)
    parser.add_argument("-h", "--help", action="help", help="Show this help message and exit")
    return parser.parse_args()


def run(cmd, **kwargs):
    print("+", " ".join(cmd))
    subprocess.check_call(cmd, **kwargs)


def main():
    args = parse_args()
    overlay = not args.no_overlay

    ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
    BASE_REPO = os.path.join(ROOT_DIR, "codex-universal")
    OVERLAY_DIR = os.path.join(ROOT_DIR, "rootfs")
    OUTPUT_DIR = os.path.join(ROOT_DIR, "build", "rootfs")
    TARBALL = os.path.join(ROOT_DIR, "codex-universal-wsl.tar.gz")

    if not os.path.exists(BASE_REPO):
        print("codex-universal submodule not found. Run 'git submodule update --init --depth 1'", flush=True)
        raise SystemExit(1)

    if os.path.exists(OUTPUT_DIR):
        shutil.rmtree(OUTPUT_DIR)
    os.makedirs(OUTPUT_DIR)

    base_fs = os.path.join(BASE_REPO, "rootfs")
    if os.path.isdir(base_fs):
        run(["cp", "-a", os.path.join(base_fs, "."), OUTPUT_DIR])
    else:
        print("Base repo missing rootfs: %s" % base_fs)
        raise SystemExit(1)

    if overlay:
        run(["cp", "-a", "%s/." % OVERLAY_DIR, OUTPUT_DIR])

    run(["tar", "--numeric-owner", "-C", OUTPUT_DIR, "-czf", TARBALL, "."])
    print("WSL distro created: %s" % TARBALL)


if __name__ == "__main__":
    main()
